#!/usr/bin/env python3
"""
Test script for Crystal Reports functionality
"""

import os
import sys
from datetime import datetime

# Add the current directory to the path so we can import our modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_crystal_report():
    """Test the Crystal Reports functionality"""
    try:
        # Import the crystal report renderer
        from main_prgram_tax import CrystalReportStyleRenderer
        
        print("‚úÖ Successfully imported CrystalReportStyleRenderer")
        
        # Initialize the renderer
        renderer = CrystalReportStyleRenderer()
        print("‚úÖ Successfully initialized CrystalReportStyleRenderer")
        
        # Test database connection
        conn = renderer.get_connection()
        if conn:
            print("‚úÖ Database connection successful")
            conn.close()
        else:
            print("‚ùå Database connection failed")
        
        # Test certificate creation
        test_data = (
            "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î",  # withholder_name
            "123 ‡∏ñ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÄ‡∏Ç‡∏ï‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10000",  # withholder_address
            "0123456789012",  # withholder_tax_id
            "‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",  # withholder_type
            "‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö",  # withholdee_name
            "456 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10000",  # withholdee_address
            "9876543210987",  # withholdee_tax_id
            "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",  # withholdee_type
            "BK001",  # certificate_book_no
            "CERT001",  # certificate_no
            1,  # sequence_in_form
            "‡∏†.‡∏á.‡∏î.1‡∏Å",  # form_type
            50000.00,  # income_type_1_amount
            5000.00,  # income_type_1_tax
            10000.00,  # income_type_2_amount
            1000.00,  # income_type_2_tax
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None,  # Other income fields
            60000.00,  # total_income
            6000.00,  # total_tax_withheld
            "‡∏´‡∏Å‡∏û‡∏±‡∏ô‡∏ö‡∏≤‡∏ó‡∏ñ‡πâ‡∏ß‡∏ô",  # total_tax_withheld_text
            1000.00,  # provident_fund
            500.00,  # social_security_fund
            300.00,  # retirement_mutual_fund
            "‡∏´‡∏±‡∏Å‡∏ì‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢",  # issue_type
            None,  # issue_type_other
            "2024-01-15",  # issue_date
            "‡∏ô‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏£‡∏∞‡∏ö‡∏ö",  # signatory_name
            True  # company_seal
        )
        
        # Save certificate
        certificate_id = renderer.save_certificate(test_data)
        if certificate_id:
            print(f"‚úÖ Certificate saved with ID: {certificate_id}")
            
            # Test retrieving certificate
            cert_data = renderer.get_certificate_by_id(certificate_id)
            if cert_data:
                print("‚úÖ Certificate retrieved successfully")
                print(f"   Withholder: {cert_data.get('withholder_name', 'N/A')}")
                print(f"   Withholdee: {cert_data.get('withholdee_name', 'N/A')}")
                print(f"   Total Income: {cert_data.get('total_income', 0):,.2f}")
                
                # Test PDF generation
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                pdf_filename = f"test_crystal_report_{certificate_id}_{timestamp}.pdf"
                success, message = renderer.create_crystal_report_pdf(cert_data, pdf_filename)
                
                if success:
                    print(f"‚úÖ Crystal Reports PDF created: {pdf_filename}")
                    if os.path.exists(pdf_filename):
                        print(f"‚úÖ PDF file exists: {os.path.abspath(pdf_filename)}")
                    else:
                        print("‚ùå PDF file not found")
                else:
                    print(f"‚ùå PDF creation failed: {message}")
            else:
                print("‚ùå Failed to retrieve certificate")
        else:
            print("‚ùå Failed to save certificate")
        
        # Test getting all certificates
        certificates = renderer.get_all_certificates()
        print(f"‚úÖ Retrieved {len(certificates)} certificates from database")
        
        print("\nüéâ Crystal Reports functionality test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Crystal Reports functionality: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ Testing Crystal Reports functionality...")
    print("=" * 50)
    
    success = test_crystal_report()
    
    print("=" * 50)
    if success:
        print("‚úÖ All tests passed!")
    else:
        print("‚ùå Some tests failed!")
    
    print("\nüìã Summary:")
    print("‚Ä¢ Crystal Reports tab added to main program")
    print("‚Ä¢ Database functionality working")
    print("‚Ä¢ PDF generation capability implemented")
    print("‚Ä¢ Background image support available")
    print("‚Ä¢ Professional report layout with sections")
    print("‚Ä¢ High DPI output for printing")
