#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏•‡∏á PDF
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô PDF
"""

import os
import sys
from datetime import datetime

def test_method_1_pymupdf():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ PyMuPDF (fitz)"""
    print("üß™ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ PyMuPDF")
    try:
        import fitz
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà
        doc = fitz.open()
        page = doc.new_page()
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        thai_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ üáπüá≠"
        print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {thai_text}")
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ Thai font ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        thai_fonts = [
            r"C:\Windows\Fonts\tahoma.ttf",
            r"C:\Windows\Fonts\Tahoma.ttf", 
            r"C:\Windows\Fonts\THSarabunNew.ttf",
            r"C:\Windows\Fonts\NotoSansThai-Regular.ttf",
            r"C:\Windows\Fonts\LeelawUI.ttf",
            r"C:\Windows\Fonts\LilyUPC.ttf",
            r"C:\Windows\Fonts\arial.ttf",
            r"C:\Windows\Fonts\ARIALUNI.TTF"
        ]
        
        y_pos = 100
        font_found = False
        
        for font_path in thai_fonts:
            if os.path.exists(font_path):
                try:
                    print(f"üîç ‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {font_path}")
                    
                    # ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                    methods = [
                        lambda: doc.insert_font(fontfile=font_path),
                        lambda: doc.insertFont(fontfile=font_path),
                        lambda: doc.insert_font(fontname="thai", fontfile=font_path),
                        lambda: doc.insertFont(fontname="thai", fontfile=font_path),
                    ]
                    
                    for i, method in enumerate(methods):
                        try:
                            font_name = method()
                            print(f"‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà {i+1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {font_name}")
                            
                            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                            point = fitz.Point(50, y_pos)
                            page.insert_text(point, f"[{os.path.basename(font_path)}] {thai_text}", 
                                           fontsize=16, fontname=font_name, color=(0, 0, 0))
                            y_pos += 30
                            font_found = True
                            break
                            
                        except Exception as e:
                            print(f"‚ùå ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà {i+1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                            continue
                    
                    if font_found:
                        break
                        
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå {font_path}: {e}")
                    continue
        
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô + UTF-8
        if not font_found:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô + UTF-8")
            try:
                point = fitz.Point(50, y_pos)
                page.insert_text(point, f"[Default + UTF-8] {thai_text}", 
                               fontsize=16, encoding=1, color=(1, 0, 0))
                y_pos += 30
            except Exception as e:
                print(f"‚ùå ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô + UTF-8 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        try:
            point = fitz.Point(50, y_pos)
            page.insert_text(point, f"[Default] {thai_text}", 
                           fontsize=16, color=(0, 0, 1))
            y_pos += 30
        except Exception as e:
            print(f"‚ùå ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"test_thai_pymupdf_{timestamp}.pdf"
        doc.save(filename)
        doc.close()
        
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
        return True
        
    except ImportError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PyMuPDF (fitz)")
        return False
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î PyMuPDF: {e}")
        return False

def test_method_2_reportlab():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ReportLab"""
    print("\nüß™ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ReportLab")
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"test_thai_reportlab_{timestamp}.pdf"
        c = canvas.Canvas(filename, pagesize=A4)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        thai_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ üáπüá≠"
        print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {thai_text}")
        
        # ‡∏•‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
        thai_fonts = [
            (r"C:\Windows\Fonts\tahoma.ttf", "Tahoma"),
            (r"C:\Windows\Fonts\Tahoma.ttf", "Tahoma2"), 
            (r"C:\Windows\Fonts\THSarabunNew.ttf", "THSarabun"),
            (r"C:\Windows\Fonts\NotoSansThai-Regular.ttf", "NotoThai"),
            (r"C:\Windows\Fonts\LeelawUI.ttf", "Leelaw"),
            (r"C:\Windows\Fonts\arial.ttf", "Arial"),
            (r"C:\Windows\Fonts\ARIALUNI.TTF", "ArialUni")
        ]
        
        y_pos = 750
        font_registered = False
        
        for font_path, font_name in thai_fonts:
            if os.path.exists(font_path):
                try:
                    print(f"üîç ‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {font_path}")
                    pdfmetrics.registerFont(TTFont(font_name, font_path))
                    print(f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {font_name}")
                    
                    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    c.setFont(font_name, 16)
                    c.drawString(50, y_pos, f"[{font_name}] {thai_text}")
                    y_pos -= 30
                    font_registered = True
                    
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå {font_name}: {e}")
                    continue
        
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if not font_registered:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        try:
            c.setFont("Helvetica", 16)
            c.drawString(50, y_pos, f"[Helvetica] {thai_text}")
            y_pos -= 30
        except Exception as e:
            print(f"‚ùå ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Helvetica ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        c.save()
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
        return True
        
    except ImportError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ReportLab")
        return False
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ReportLab: {e}")
        return False

def test_method_3_pypdf():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ PyPDF2/PyPDF4"""
    print("\nüß™ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ PyPDF2")
    try:
        import PyPDF2
        print("üìå PyPDF2 ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô/‡∏£‡∏ß‡∏° PDF ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà")
        print("‚úÖ PyPDF2 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° PDF)")
        return True
        
    except ImportError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PyPDF2")
        return False

def check_system_fonts():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:")
    
    font_paths = [
        r"C:\Windows\Fonts\tahoma.ttf",
        r"C:\Windows\Fonts\Tahoma.ttf",
        r"C:\Windows\Fonts\THSarabunNew.ttf", 
        r"C:\Windows\Fonts\NotoSansThai-Regular.ttf",
        r"C:\Windows\Fonts\LeelawUI.ttf",
        r"C:\Windows\Fonts\LeelUIsl.ttf",
        r"C:\Windows\Fonts\LilyUPC.ttf",
        r"C:\Windows\Fonts\arial.ttf",
        r"C:\Windows\Fonts\ARIALUNI.TTF",
        r"C:\Windows\Fonts\calibri.ttf",
        r"C:\Windows\Fonts\Calibri.ttf"
    ]
    
    found_fonts = []
    for font_path in font_paths:
        if os.path.exists(font_path):
            print(f"‚úÖ {font_path}")
            found_fonts.append(font_path)
        else:
            print(f"‚ùå {font_path}")
    
    print(f"\nüìä ‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(found_fonts)} ‡∏ü‡∏≠‡∏ô‡∏ï‡πå")
    return found_fonts

def check_encoding():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™"""
    print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™:")
    
    thai_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ üáπüá≠"
    
    print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {thai_text}")
    print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(thai_text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    print(f"üî¢ UTF-8 bytes: {thai_text.encode('utf-8')}")
    print(f"üî¢ UTF-16 bytes: {thai_text.encode('utf-16')}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    print(f"üìÑ File encoding: {sys.stdout.encoding}")
    print(f"üíª System encoding: {sys.getdefaultencoding()}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("=" * 60)
    print("üáπüá≠ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏•‡∏á PDF")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
    check_encoding()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    found_fonts = check_system_fonts()
    
    if not found_fonts:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö! ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ
    results = []
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö PyMuPDF
    results.append(("PyMuPDF", test_method_1_pymupdf()))
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ReportLab
    results.append(("ReportLab", test_method_2_reportlab()))
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö PyPDF2
    results.append(("PyPDF2", test_method_3_pypdf()))
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("=" * 60)
    
    for method, success in results:
        status = "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if success else "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        print(f"{method}: {status}")
    
    print(f"\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {os.getcwd()}")
    print("üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

if __name__ == "__main__":
    main()
