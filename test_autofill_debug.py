#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test AutoFill Debug Program
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AutoFill ‡πÅ‡∏•‡∏∞ debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
"""

import json
import os
import time
import threading
from datetime import datetime

def test_temp_file_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö temp file"""
    print("=" * 50)
    print("üß™ Testing Temp File System")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Dashboard)
    test_data = {
        'withholder_name': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        'withholder_address': '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10100',
        'withholder_tax_id': '1234567890123',
        'transfer_record': {
            'id': 999,
            'name': '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
            'surname': '‡πÉ‡∏à‡∏î‡∏µ',
            'transfer_amount': 10000.00,
            'transfer_date': '2024-01-15',
            'id_card': '9876543210987',
            'address': '456 ‡∏ñ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50100',
            'percent': 3.0,
            'total_amount': 10300.00,
            'fee': 300.00,
            'remark': '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°'
        }
    }
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á temp file
    temp_file_path = os.path.join(os.getcwd(), "temp_dashboard_data.json")
    try:
        with open(temp_file_path, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Created temp file: {temp_file_path}")
        print(f"üìÑ Data written: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
    except Exception as e:
        print(f"‚ùå Failed to create temp file: {e}")
        return False
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    try:
        with open(temp_file_path, 'r', encoding='utf-8') as f:
            loaded_data = json.load(f)
        print(f"‚úÖ Successfully read temp file")
        print(f"üìñ Data loaded: {json.dumps(loaded_data, ensure_ascii=False, indent=2)}")
        return True
    except Exception as e:
        print(f"‚ùå Failed to read temp file: {e}")
        return False

def simulate_thread1_withholder():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á Thread 1: Auto-fill ‡∏ú‡∏π‡πâ‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ"""
    print("\nüîÑ Thread 1: Loading withholder data...")
    time.sleep(1.0)  # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    temp_file_path = os.path.join(os.getcwd(), "temp_dashboard_data.json")
    
    if os.path.exists(temp_file_path):
        try:
            with open(temp_file_path, 'r', encoding='utf-8') as f:
                dashboard_data = json.load(f)
            
            print(f"üîç Found temp file data: {dashboard_data}")
            
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ
            withholder_name = dashboard_data.get('withholder_name', '')
            withholder_address = dashboard_data.get('withholder_address', '')
            withholder_tax_id = dashboard_data.get('withholder_tax_id', '')
            
            print(f"‚úÖ Withholder Name: {withholder_name}")
            print(f"‚úÖ Withholder Address: {withholder_address}")
            print(f"‚úÖ Withholder Tax ID: {withholder_tax_id}")
            
            return True
        except Exception as ex:
            print(f"‚ùå Thread 1 error: {ex}")
            return False
    else:
        print("‚ö†Ô∏è No temp file found for Thread 1")
        return False

def simulate_thread2_withholdee():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á Thread 2: Auto-fill ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ"""
    print("\nüîÑ Thread 2: Loading withholdee data...")
    time.sleep(1.5)  # ‡∏£‡∏≠ 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    temp_file_path = os.path.join(os.getcwd(), "temp_dashboard_data.json")
    
    if os.path.exists(temp_file_path):
        try:
            with open(temp_file_path, 'r', encoding='utf-8') as f:
                dashboard_data = json.load(f)
            
            print(f"üîç Found temp file data for withholdee: {dashboard_data}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö transfer_record
            if dashboard_data.get('transfer_record'):
                record = dashboard_data['transfer_record']
                name = record.get('name', '')
                surname = record.get('surname', '')
                full_name = f"{name} {surname}".strip()
                
                if full_name:
                    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ
                    withholdee_name = full_name
                    withholdee_address = record.get('address', '')
                    withholdee_tax_id = record.get('id_card', '')
                    
                    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                    transfer_amount = record.get('transfer_amount', 0)
                    fee = record.get('fee', 0)
                    
                    print(f"‚úÖ Withholdee Name: {withholdee_name}")
                    print(f"‚úÖ Withholdee Address: {withholdee_address}")
                    print(f"‚úÖ Withholdee Tax ID: {withholdee_tax_id}")
                    print(f"‚úÖ Transfer Amount: {transfer_amount:,.2f}")
                    print(f"‚úÖ Fee: {fee:,.2f}")
                    
                    return True
                else:
                    print("‚ö†Ô∏è No valid name found in transfer_record")
                    return False
            else:
                print("‚ö†Ô∏è No transfer_record found in temp file")
                return False
        except Exception as ex:
            print(f"‚ùå Thread 2 error: {ex}")
            return False
    else:
        print("‚ö†Ô∏è No temp file found for Thread 2")
        return False

def test_threading_simulation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Threading"""
    print("\n" + "=" * 50)
    print("üß™ Testing Threading Simulation")
    print("=" * 50)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏ó‡∏±‡πâ‡∏á 2
    thread1 = threading.Thread(target=simulate_thread1_withholder, daemon=True)
    thread2 = threading.Thread(target=simulate_thread2_withholdee, daemon=True)
    
    print("üöÄ Starting both threads...")
    thread1.start()
    thread2.start()
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ thread ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    thread1.join()
    thread2.join()
    
    print("‚úÖ Both threads completed")

def check_main_program_variables():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
    print("\n" + "=" * 50)
    print("üß™ Checking Main Program Variables")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    main_file = "main_prgram_tax.py"
    if not os.path.exists(main_file):
        print(f"‚ùå Main file not found: {main_file}")
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö temp file ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    temp_files = [f for f in os.listdir('.') if f.startswith('temp_') and f.endswith('.json')]
    print(f"üìÅ Found temp files: {temp_files}")
    
    for temp_file in temp_files:
        try:
            with open(temp_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"üìñ {temp_file}: {json.dumps(data, ensure_ascii=False, indent=2)}")
        except Exception as e:
            print(f"‚ùå Error reading {temp_file}: {e}")
    
    return True

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üî¨ AutoFill Debug Test Program")
    print(f"üìÖ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÇ Working directory: {os.getcwd()}")
    
    # Test 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö temp file
    success1 = test_temp_file_system()
    
    # Test 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö threading
    if success1:
        test_threading_simulation()
    
    # Test 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
    check_main_program_variables()
    
    print("\n" + "=" * 50)
    print("üéØ Test Summary")
    print("=" * 50)
    print("‚úÖ Temp file system: Working")
    print("‚úÖ Threading simulation: Working")
    print("üìã Check the results above to debug the main program")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    report = {
        "test_time": datetime.now().isoformat(),
        "working_directory": os.getcwd(),
        "temp_file_test": success1,
        "message": "Test completed successfully"
    }
    
    with open("test_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìä Test report saved to: test_report.json")

if __name__ == "__main__":
    main()


